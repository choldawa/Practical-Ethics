#Distribution of responses
ggplot(df,aes(p)) +
theme_minimal()+
geom_histogram(bins = 15) +facet_grid(tradeoff~.)+
geom_rect(aes(xmin=-25, xmax=25, ymin=0, ymax=Inf), fill = "red", alpha = 0.1)+
theme(text = element_text(size=20))
#Distribution of responses
ggplot(df,aes(p)) +
theme_minimal()+
geom_histogram(bins = 15) +facet_grid(tradeoff~.)+
geom_rect(aes(xmin=-25, xmax=25, ymin=0, ymax=Inf), fill = "red", alpha = 0.01)+
theme(text = element_text(size=20))
#Distribution of responses
ggplot(df,aes(p)) +
theme_minimal()+
geom_histogram(bins = 15) +facet_grid(tradeoff~.)+
geom_rect(aes(xmin=-25, xmax=25, ymin=0, ymax=Inf), fill = "red", alpha = 0.001)+
theme(text = element_text(size=20))
#Distribution of responses
ggplot(df,aes(p)) +
theme_minimal()+
geom_histogram(bins = 15) +facet_grid(tradeoff~.)+
geom_rect(aes(xmin=-25, xmax=25, ymin=0, ymax=Inf), fill = "red", alpha = 0.05)+
theme(text = element_text(size=20))
#Distribution of responses
ggplot(df,aes(p)) +
theme_minimal()+
geom_histogram(bins = 15) +facet_grid(tradeoff~.)+
geom_rect(aes(xmin=-25, xmax=25, ymin=0, ymax=Inf), fill = "red", alpha = 0.005)+
theme(text = element_text(size=20))
#Distribution of responses
ggplot(df,aes(p)) +
theme_minimal()+
geom_histogram(bins = 15) +facet_grid(tradeoff~.)+
#geom_rect(aes(xmin=-25, xmax=25, ymin=0, ymax=Inf), fill = "red", alpha = 0.005)+
annotate("rect", xmin = -25, xmax = 25, ymin = 0, ymax =Inf,
alpha = .2)
#Distribution of responses
ggplot(df,aes(p)) +
theme_minimal()+
geom_histogram(bins = 15) +facet_grid(tradeoff~.)+
#geom_rect(aes(xmin=-25, xmax=25, ymin=0, ymax=Inf), fill = "red", alpha = 0.005)+
annotate("rect", xmin = -25, xmax = 25, ymin = 0, ymax =Inf,
alpha = .2, fill = "red")+
theme(text = element_text(size=20))
#Distribution of responses
ggplot(df,aes(p)) +
theme_minimal()+
geom_histogram(bins = 15) +facet_grid(tradeoff~.)+
#geom_rect(aes(xmin=-25, xmax=25, ymin=0, ymax=Inf), fill = "red", alpha = 0.005)+
annotate("rect", xmin = -25, xmax = 25, ymin = 0, ymax =Inf,
alpha = .2, fill = "red")+
annotate("rect", xmin = -75, xmax = 125, ymin = 0, ymax =Inf,
alpha = .2, fill = "blue")+
theme(text = element_text(size=20))
#Distribution of responses
ggplot(df,aes(p)) +
theme_minimal()+
geom_histogram(bins = 15) +facet_grid(tradeoff~.)+
#geom_rect(aes(xmin=-25, xmax=25, ymin=0, ymax=Inf), fill = "red", alpha = 0.005)+
annotate("rect", xmin = -25, xmax = 25, ymin = 0, ymax =Inf,
alpha = .2, fill = "red")+
annotate("rect", xmin = 75, xmax = 125, ymin = 0, ymax =Inf,
alpha = .2, fill = "blue")+
theme(text = element_text(size=20))
#Distribution of responses
ggplot(df,aes(p)) +
theme_minimal()+
geom_histogram(bins = 15) +facet_grid(tradeoff~.)+
#geom_rect(aes(xmin=-25, xmax=25, ymin=0, ymax=Inf), fill = "red", alpha = 0.005)+
annotate("rect", xmin = -20, xmax = 20, ymin = 0, ymax =Inf,
alpha = .2, fill = "red")+
annotate("rect", xmin = 80, xmax = 120, ymin = 0, ymax =Inf,
alpha = .2, fill = "blue")+
theme(text = element_text(size=20))
mean((df_high  %>%
filter( p >20 && p <80))$p)
library(jsonlite)
library(tidyverse)
#Read in and merge all json data files
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
setwd("../data")
file_list = list.files()
# setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# setwd("./dataV3V4combined")
# file_list = list.files()
for (file in file_list){
print(file)
# if the merged dataset doesn't exist, create it
if (!exists("df_full")){
json.data = fromJSON(file)
df_full = data.frame(json.data[["trials"]][["response"]],
json.data[["trials"]][["att"]],
json.data[["trials"]][["trialNumber"]],
json.data[["trials"]][["prompt"]],
json.data[["trials"]][["chosenData"]][["g1"]],
json.data[["trials"]][["chosenData"]][["g2"]],
json.data[["trials"]][["chosenData"]][["g3"]],
json.data[["trials"]][["chosenData"]][["g4"]],
json.data[["trials"]][["chosenData"]][["mu"]],
json.data[["trials"]][["chosenData"]][["tradeoff"]],
json.data[["trials"]][["chosenData"]][["p"]],
json.data[["trials"]][["jitter"]],
json.data[["subjectData"]][["promptCheck1"]],
json.data[["subjectData"]][["promptCheck2"]])
df_full$id = json.data[["client"]][["sid"]]
}
# if the merged dataset does exist, append to it
if (exists("df_full")){
json.data = fromJSON(file)
temp_dataset = data.frame(json.data[["trials"]][["response"]],
json.data[["trials"]][["att"]],
json.data[["trials"]][["trialNumber"]],
json.data[["trials"]][["prompt"]],
json.data[["trials"]][["chosenData"]][["g1"]],
json.data[["trials"]][["chosenData"]][["g2"]],
json.data[["trials"]][["chosenData"]][["g3"]],
json.data[["trials"]][["chosenData"]][["g4"]],
json.data[["trials"]][["chosenData"]][["mu"]],
json.data[["trials"]][["chosenData"]][["tradeoff"]],
json.data[["trials"]][["chosenData"]][["p"]],
json.data[["trials"]][["jitter"]],
json.data[["subjectData"]][["promptCheck1"]],
json.data[["subjectData"]][["promptCheck2"]])
temp_dataset$id = json.data[["client"]][["sid"]]
df_full = rbind(df_full, temp_dataset)
rm(temp_dataset)
}
}
df = df_full %>% distinct()
colnames(df) = c("response","att", "trialNumber", "prompt", "g1","g2","g3","g4", "mu", "tradeoff", "p", "jitter","check1", "check2", "id")
df$response = as.numeric(as.character(df$response))
df$g1 = round(df$g1,0)
df$g2 = round(df$g2,0)
df$g3 = round(df$g3,0)
df$g4 = round(df$g4,0)
df$mu = round(df$mu,0)
#variance of response
df = df %>%
mutate(var = pmap_dbl(list(g1,g2,g3,g4), ~ var(c(...))))
df$sd = sqrt(df$var)
#dataframe manipulation (can be done on group df)
df$prompt.type <- ifelse(grepl("loan", df$prompt, ignore.case = T), "loan",
ifelse(grepl("newspaper", df$prompt, ignore.case = T), "newspaper",
ifelse(grepl("bail", df$prompt, ignore.case = T), "bail",
ifelse(grepl("job", df$prompt, ignore.case = T), "job",
ifelse(grepl("meals", df$prompt, ignore.case = T), "meals",
ifelse(grepl("respirator", df$prompt, ignore.case = T), "respirator","Other"))))))
df$tradeoff <- ifelse(grepl("LOW", df$tradeoff, ignore.case = T), "low",
ifelse(grepl("MED", df$tradeoff, ignore.case = T), "med","high"))
df = df %>% mutate(tradeoff = fct_relevel(tradeoff,
"low",
"med",
"high"))
df = df %>%
filter(att == 0)
glimpse(df)
df_low = df %>% filter(tradeoff == "low")
df_med = df %>% filter(tradeoff == "med")
df_high = df %>% filter(tradeoff == "high")
sum((df_low$mu == max(df_low$mu)))/length(df_low$mu)
sum(df_low$sd == 0)/length(df_low$sd)
sum((df_med$mu == max(df_med$mu)))/length(df_med$mu)
sum(df_med$sd == 0)/length(df_med$sd)
sum((df_high$mu == max(df_high$mu)))/length(df_high$mu)
sum(df_high$sd == 0)/length(df_high$sd)
mean((df_high  %>%
filter( p >20 && p <80))$p)
mean((df_med  %>%
filter( p >20 && p <80))$p)
mean((df_low  %>%
filter( p >20 && p <80))$p)
sum((df_low$p < 20)/length(df_low$p)
sum(df_low$p < 20)/length(df_low$p)
sum(df_low$p < 20)/length(df_low$p)
sum(df_low$p > 80)/length(df_low$p)
sum(df_med$p > 80)/length(df_med$p)
sum(df_med$p < 20)/length(df_med$p)
sum(df_high$p < 20)/length(df_high$p)
sum(df_high$p > 80)/length(df_high$p)
library(jsonlite)
library(tidyverse)
#Read in and merge all json data files
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
setwd("./data")
file_list = list.files()
# setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# setwd("./dataV3V4combined")
# file_list = list.files()
for (file in file_list){
print(file)
# if the merged dataset doesn't exist, create it
if (!exists("df_full")){
json.data = fromJSON(file)
df_full = data.frame(json.data[["trials"]][["response"]],
json.data[["trials"]][["att"]],
json.data[["trials"]][["trialNumber"]],
json.data[["trials"]][["prompt"]],
json.data[["trials"]][["chosenData"]][["g1"]],
json.data[["trials"]][["chosenData"]][["g2"]],
json.data[["trials"]][["chosenData"]][["g3"]],
json.data[["trials"]][["chosenData"]][["g4"]],
json.data[["trials"]][["chosenData"]][["mu"]],
json.data[["trials"]][["chosenData"]][["tradeoff"]],
json.data[["trials"]][["chosenData"]][["p"]],
json.data[["trials"]][["jitter"]],
json.data[["subjectData"]][["promptCheck1"]],
json.data[["subjectData"]][["promptCheck2"]])
df_full$id = json.data[["client"]][["sid"]]
}
# if the merged dataset does exist, append to it
if (exists("df_full")){
json.data = fromJSON(file)
temp_dataset = data.frame(json.data[["trials"]][["response"]],
json.data[["trials"]][["att"]],
json.data[["trials"]][["trialNumber"]],
json.data[["trials"]][["prompt"]],
json.data[["trials"]][["chosenData"]][["g1"]],
json.data[["trials"]][["chosenData"]][["g2"]],
json.data[["trials"]][["chosenData"]][["g3"]],
json.data[["trials"]][["chosenData"]][["g4"]],
json.data[["trials"]][["chosenData"]][["mu"]],
json.data[["trials"]][["chosenData"]][["tradeoff"]],
json.data[["trials"]][["chosenData"]][["p"]],
json.data[["trials"]][["jitter"]],
json.data[["subjectData"]][["promptCheck1"]],
json.data[["subjectData"]][["promptCheck2"]])
temp_dataset$id = json.data[["client"]][["sid"]]
df_full = rbind(df_full, temp_dataset)
rm(temp_dataset)
}
}
df = df_full %>% distinct()
colnames(df) = c("response","att", "trialNumber", "prompt", "g1","g2","g3","g4", "mu", "tradeoff", "p", "jitter","check1", "check2", "id")
df$response = as.numeric(as.character(df$response))
#variance of response
df = df %>%
mutate(var = pmap_dbl(list(g1,g2,g3,g4), ~ var(c(...))))
df$sd = sqrt(df$var)
#attention checks
df30 = df %>% select(att, p, id, trialNumber) %>%  filter(att == 1, trialNumber ==5)
df30$diff = abs(df30$p-30)
df60 = df %>% select(att, p, id, trialNumber) %>%  filter(att == 1, trialNumber ==25)
df60$diff = abs(df60$p-60)
table(df30$diff)
ggplot(df30, aes(diff)) +
geom_histogram(bins = 15)
#dataframe manipulation (can be done on group df)
df$prompt.type <- ifelse(grepl("loan", df$prompt, ignore.case = T), "loan",
ifelse(grepl("newspaper", df$prompt, ignore.case = T), "newspaper",
ifelse(grepl("bail", df$prompt, ignore.case = T), "bail",
ifelse(grepl("job", df$prompt, ignore.case = T), "job",
ifelse(grepl("meals", df$prompt, ignore.case = T), "meals",
ifelse(grepl("respirator", df$prompt, ignore.case = T), "respirator","Other"))))))
df$tradeoff <- ifelse(grepl("LOW", df$tradeoff, ignore.case = T), "low",
ifelse(grepl("MED", df$tradeoff, ignore.case = T), "med","high"))
df = df %>% mutate(tradeoff = fct_relevel(tradeoff,
"low",
"med",
"high"))
##remove attention trials
df = df %>%
filter(att == 0)
df %>% group_by(tradeoff) %>% summarise(round(max(mu),0))
df %>% group_by(tradeoff) %>%
filter(round(mu,0) == round(max(mu),0))%>%
filter( p == min(p) | p == max(p)) %>% filter(tradeoff == 'low') %>%
select(p, mu)
df %>% group_by(tradeoff) %>% summarise(mean(p))
#plots of response by datatype and prompt
library(ggpubr)
ggerrorplot(df, x = "tradeoff", y = "p",
desc_stat = "mean_se", size  =1)+
theme(text = element_text(size=20))+
xlab("Tradeoff Type")
ggerrorplot(df, x = "tradeoff", y = "p",
desc_stat = "mean_se", size  =1)+
theme(text = element_text(size=20))+
xlab("Tradeoff Type")+
ylab("Equality Index")+
ylim(50,70)
ggerrorplot(df, x = "tradeoff", y = "p",
desc_stat = "mean_se", size  =1)+
theme(text = element_text(size=20))+
xlab("Tradeoff Type")+
ylab("Equality Index")+
ylim(55,65)
ggerrorplot(df, x = "tradeoff", y = "p",
desc_stat = "mean_se", size  =1)+
theme(text = element_text(size=20))+
xlab("Tradeoff Type")+
ylab("Equality Index")
ggerrorplot(df, x = "tradeoff", y = "p",
desc_stat = "mean_se", size  =1)+
theme(text = element_text(size=20))+
xlab("Tradeoff Type")+
ylab("Equality Index")+
ylim(55,65)
ggerrorplot(df, x = "tradeoff", y = "p",
desc_stat = "mean_se", size  =1)+
theme(text = element_text(size=20))+
xlab("Tradeoff Type")+
ylab("Equality Index")
df %>% mutate(name = fct_relevel(prompt.type,
"loan",
"bail",
"job",
"newspaper",
"meals",
"respirator")) %>%
ggerrorplot(x = "name", y = "p",
desc_stat = "mean_se", size  =1)+
theme(text = element_text(size=20))+
xlab("Prompt")+
ylab("Equality Index")
df %>% mutate(name = fct_relevel(prompt.type,
"loan",
"bail",
"job",
"newspaper",
"meals",
"respirator")) %>%
ggerrorplot(x = "name", y = "p",
desc_stat = "mean_se", size  =1)+
theme(text = element_text(size=20), axis.text.x = rotatedAxisElementText(a,'Prompt'))+
#xlab("Prompt")+
ylab("Equality Index")
df %>% mutate(name = fct_relevel(prompt.type,
"loan",
"bail",
"job",
"newspaper",
"meals",
"respirator")) %>%
ggerrorplot(x = "name", y = "p",
desc_stat = "mean_se", size  =1)+
theme(text = element_text(size=20), axis.text.x = rotatedAxisElementText(a,'Prompt'))+
#xlab("Prompt")+
ylab("Equality Index")
df %>% mutate(name = fct_relevel(prompt.type,
"loan",
"bail",
"job",
"newspaper",
"meals",
"respirator")) %>%
ggerrorplot(x = "name", y = "p",
desc_stat = "mean_se", size  =1)+
theme(text = element_text(size=20))+
xlab("Prompt")+
scale_x_discrete(guide = guide_axis(n.dodge = 2))+
ylab("Equality Index")
df %>% mutate(name = fct_relevel(prompt.type,
"loan",
"bail",
"job",
"newspaper",
"meals",
"respirator")) %>%
ggerrorplot(x = "name", y = "p",
desc_stat = "mean_se", size  =1)+
theme(text = element_text(size=20))+
xlab("Prompt")+
ylab("Equality Index")
df %>% mutate(name = fct_relevel(prompt.type,
"loan",
"bail",
"job",
"newspaper",
"meals",
"respirator")) %>%
ggerrorplot(x = "name", y = "p",
desc_stat = "mean_se", size  =1)+
theme(text = element_text(size=20), axis.text.x = element_text(angle = 45))+
xlab("Prompt")+
ylab("Equality Index")
df %>% mutate(name = fct_relevel(prompt.type,
"loan",
"bail",
"job",
"newspaper",
"meals",
"respirator")) %>%
ggerrorplot(x = "name", y = "p",
desc_stat = "mean_se", size  =1)+
theme(text = element_text(size=20), axis.text.x = element_text(angle = 90))+
xlab("Prompt")+
ylab("Equality Index")
df %>% mutate(name = fct_relevel(prompt.type,
"loan",
"bail",
"job",
"newspaper",
"meals",
"respirator")) %>%
ggerrorplot(x = "name", y = "p",
desc_stat = "mean_se", size  =1)+
theme(text = element_text(size=20), axis.text.x = element_text(angle = 90, size = 12))+
xlab("Prompt")+
ylab("Equality Index")
df %>% mutate(name = fct_relevel(prompt.type,
"loan",
"bail",
"job",
"newspaper",
"meals",
"respirator")) %>%
ggerrorplot(x = "name", y = "p",
desc_stat = "mean_se", size  =1)+
theme(text = element_text(size=20), axis.text.x = element_text(size = 12))+
xlab("Prompt")+
ylab("Equality Index")
ggerrorplot(df, x = "tradeoff", y = "p",
desc_stat = "mean_se", size  =1)+
theme(text = element_text(size=20))+
xlab("Tradeoff Type")+
ylab("Equality Index")
library(jsonlite)
library(tidyverse)
#Read in and merge all json data files
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
setwd("../data")
file_list = list.files()
# setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# setwd("./dataV3V4combined")
# file_list = list.files()
for (file in file_list){
print(file)
# if the merged dataset doesn't exist, create it
if (!exists("df_full")){
json.data = fromJSON(file)
df_full = data.frame(json.data[["trials"]][["response"]],
json.data[["trials"]][["att"]],
json.data[["trials"]][["trialNumber"]],
json.data[["trials"]][["prompt"]],
json.data[["trials"]][["chosenData"]][["g1"]],
json.data[["trials"]][["chosenData"]][["g2"]],
json.data[["trials"]][["chosenData"]][["g3"]],
json.data[["trials"]][["chosenData"]][["g4"]],
json.data[["trials"]][["chosenData"]][["mu"]],
json.data[["trials"]][["chosenData"]][["tradeoff"]],
json.data[["trials"]][["chosenData"]][["p"]],
json.data[["trials"]][["jitter"]],
json.data[["subjectData"]][["promptCheck1"]],
json.data[["subjectData"]][["promptCheck2"]])
df_full$id = json.data[["client"]][["sid"]]
}
# if the merged dataset does exist, append to it
if (exists("df_full")){
json.data = fromJSON(file)
temp_dataset = data.frame(json.data[["trials"]][["response"]],
json.data[["trials"]][["att"]],
json.data[["trials"]][["trialNumber"]],
json.data[["trials"]][["prompt"]],
json.data[["trials"]][["chosenData"]][["g1"]],
json.data[["trials"]][["chosenData"]][["g2"]],
json.data[["trials"]][["chosenData"]][["g3"]],
json.data[["trials"]][["chosenData"]][["g4"]],
json.data[["trials"]][["chosenData"]][["mu"]],
json.data[["trials"]][["chosenData"]][["tradeoff"]],
json.data[["trials"]][["chosenData"]][["p"]],
json.data[["trials"]][["jitter"]],
json.data[["subjectData"]][["promptCheck1"]],
json.data[["subjectData"]][["promptCheck2"]])
temp_dataset$id = json.data[["client"]][["sid"]]
df_full = rbind(df_full, temp_dataset)
rm(temp_dataset)
}
}
df = df_full %>% distinct()
colnames(df) = c("response","att", "trialNumber", "prompt", "g1","g2","g3","g4", "mu", "tradeoff", "p", "jitter","check1", "check2", "id")
df$response = as.numeric(as.character(df$response))
df$g1 = round(df$g1,0)
df$g2 = round(df$g2,0)
df$g3 = round(df$g3,0)
df$g4 = round(df$g4,0)
df$mu = round(df$mu,0)
#variance of response
df = df %>%
mutate(var = pmap_dbl(list(g1,g2,g3,g4), ~ var(c(...))))
df$sd = sqrt(df$var)
#dataframe manipulation (can be done on group df)
df$prompt.type <- ifelse(grepl("loan", df$prompt, ignore.case = T), "loan",
ifelse(grepl("newspaper", df$prompt, ignore.case = T), "newspaper",
ifelse(grepl("bail", df$prompt, ignore.case = T), "bail",
ifelse(grepl("job", df$prompt, ignore.case = T), "job",
ifelse(grepl("meals", df$prompt, ignore.case = T), "meals",
ifelse(grepl("respirator", df$prompt, ignore.case = T), "respirator","Other"))))))
df$tradeoff <- ifelse(grepl("LOW", df$tradeoff, ignore.case = T), "low",
ifelse(grepl("MED", df$tradeoff, ignore.case = T), "med","high"))
df = df %>% mutate(tradeoff = fct_relevel(tradeoff,
"low",
"med",
"high"))
df = df %>%
filter(att == 0)
glimpse(df)
df_low = df %>% filter(tradeoff == "low")
df_med = df %>% filter(tradeoff == "med")
df_high = df %>% filter(tradeoff == "high")
sum(df_high$p > 80)/length(df_high$p)
sum(df_low$sd == 0)/length(df_low$sd)
sum((df_med$mu == max(df_med$mu)))/length(df_med$mu)
sum(df_med$sd == 0)/length(df_med$sd)
sum((df_high$mu == max(df_high$mu)))/length(df_high$mu)
sum(df_high$sd == 0)/length(df_high$sd)
mean((df_low  %>%
filter( p >20 && p <80))$p)
mean((df_med  %>%
filter( p >20 && p <80))$p)
mean((df_high  %>%
filter( p >20 && p <80))$p)
